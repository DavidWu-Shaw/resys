@model ProductDetailsModel

<div id="book-time" class="book-main">
    <div class="title">
        <h3>@T("Product.BookTime.Header"): @Model.Name</h3>
    </div>
    <div class="fieldset">
        <div class="form-fields" id="booking-calendar">
            <div class="column-left">
                <div id="navigator"></div>
            </div>
            <div class="column-main">
                <div id="calendar"></div>
            </div>
        </div>
        <div class="form-fields" id="booking-form">
            <div class="inputs">
                <label for="txtResource">@T("GroupedProduct.BookTime.SelectedResource"):</label>
                <input type="text" id="txtResource" name="txtResource" disabled />
            </div>
            <div class="inputs">
                <label for="txtTimeSlot">@T("GroupedProduct.BookTime.SelectedTimeSlot"):</label>
                <input type="text" id="txtTimeSlot" name="txtTimeSlot" disabled />
            </div>
            <input type="hidden" id="resourceId" />
            <input type="hidden" id="txtStart" name="txtStart" />
            <input type="hidden" id="txtEnd" name="txtEnd" />
            <div class="buttons">
                <button type="submit" name="btnRequestAppointment" id="btnRequestAppointment" class="button-base">
                    @T("GroupedProduct.BookTime.Confirm")
                </button>
                <button type="submit" name="btnBackToCalendar" id="btnBackToCalendar" class="button-base">
                    @T("GroupedProduct.BookTime.BackToCalendar")
                </button>
            </div>
            <p class="message" id="rMessage"></p>
        </div>
    </div>
</div>

<script type="text/javascript">
    var nav = new DayPilot.Navigator("navigator");
    nav.onTimeRangeSelected = function (args) {
        var day = args.day;

        if (dp.visibleStart() <= day && day < dp.visibleEnd()) {
            dp.scrollTo(day, "fast");
        }
        else {
            var start = day.firstDayOfMonth();
            var days = day.daysInMonth();
            dp.startDate = start;
            dp.days = days;
            dp.update();
            dp.scrollTo(day, "fast");
            loadEvents();
        }
    };

    nav.init();

    var dp = new DayPilot.Scheduler("calendar");
    dp.treeEnabled = false;
    dp.heightSpec = "Max";
    dp.height = 300;
    dp.scale = "Hour";
    dp.startDate = DayPilot.Date.today().firstDayOfMonth();
    dp.days = DayPilot.Date.today().daysInMonth();
    dp.cellWidth = 40;
    dp.eventHeight = 40;
    dp.durationBarVisible = false;
    dp.treePreventParentUsage = true;

    dp.onBeforeEventRender = function (args) {
    };

    var slotPrices = {
        //"06:00": 12,
        //"07:00": 15,
        //"08:00": 15,
        //"09:00": 15,
        //"10:00": 15,
        //"11:00": 12,
        //"12:00": 10,
        //"13:00": 10,
        //"14:00": 12,
        //"15:00": 12,
        //"16:00": 15,
        //"17:00": 15,
        //"18:00": 15,
        //"19:00": 15,
        //"20:00": 15,
        //"21:00": 12,
        //"22:00": 10,
    };

    dp.onBeforeCellRender = function (args) {
        if (args.cell.isParent) {
            return;
        }
        if (args.cell.start < new DayPilot.Date() || args.cell.start > new DayPilot.Date().addDays(7)) {  // past
            return;
        }
        if (args.cell.utilization() > 0) {
            return;
        }
        var color = "green";
        var slotId = args.cell.start.toString("HH:mm");
        var price = slotPrices[slotId];
        var min = 5;
        var max = 15;
        var opacity = price ? (price - min) / max : 0.5;
        var text = price ? "$" + price : "";
        args.cell.html = "<div style='cursor: default; position: absolute; left: 0px; top:0px; right: 0px; bottom: 0px; padding-left: 3px; text-align: center; background-color: " + color + "; color:white; opacity: " + opacity + ";'>" + text + "</div>";
    };

    dp.timeHeaders = [
        { groupBy: "Month", format: "MMMM yyyy" },
        { groupBy: "Day", format: "dddd, MMMM d" },
        { groupBy: "Hour", format: "h tt" }
    ];

    dp.businessBeginsHour = @Model.BusinessBeginsHour;
    dp.businessEndsHour = @Model.BusinessEndsHour;
    dp.businessWeekends = "@Model.BusinessOnWeekends";
    dp.showNonBusiness = false;
    dp.allowEventOverlap = false;
    //dp.cellWidthSpec = "Auto";
    dp.bubble = new DayPilot.Bubble();

    dp.onTimeRangeSelecting = function (args) {
        if (args.start < new DayPilot.Date()) {
            args.right.enabled = true;
            args.right.html = "You can't create a reservation in the past";
            args.allowed = false;
        }
        else if (args.start > new DayPilot.Date().addDays(@Model.MaxFutureDays)) {
            args.right.enabled = true;
            args.right.html = "Reservation is not available yet";
            args.allowed = false;
        }
        else if (args.duration.totalHours() > @Model.MaxHoursAllowed) {
            args.right.enabled = true;
            args.right.html = "Maximum hours of " + @Model.MaxHoursAllowed;
            args.allowed = false;
        }
    };

    // event creating
    // http://api.daypilot.org/daypilot-scheduler-ontimerangeselected/
    dp.onTimeRangeSelected = function (args) {
        var params = {
            parentProductId: "@Model.Id",
            resourceId: args.resource,
            start: args.start.toString(),
            end: args.end.toString(),
        };
        console.log("args=", args);
        console.log("params=", params);

        $.ajax({
            url: "@Url.Action("RequestVendorAppointment", "Product")",
            type: "get",
            data: params,
            cache: false
        })
        .done(function (response) {
            console.log("response =", response);
            if (response.status == false && response.data == 0) {
                // unauthenticated user, redirect to login page
                window.location = $("#aLogin").attr("href");
            }
            else {
                DisplaySelectedSlot(response);
            }
        })
        .fail(function (xhr, ajaxOptions, thrownError) {
            // Error
            DisplayError(xhr, thrownError);
        });
    };

    dp.init();

    var scrollTo = DayPilot.Date.today();
    if (new DayPilot.Date().getHours() > 12) {
        scrollTo = scrollTo.addHours(12);
    }
    dp.scrollTo(scrollTo);

    loadResources();
    loadEvents();

    function loadResources() {
        var url = "@Url.Action("GetResourcesByParent", "Product")" + "?parentProductId=@Model.Id";
        console.log(url);
        dp.rows.load(url);
    }

    function loadEvents() {
        var start = dp.startDate;
        var end = dp.startDate.addDays(dp.days);
        var params = {
            start: start.toString(),
            end: end.toString(),
            parentProductId: @Model.Id
        };
        console.log("params=", params);

        $.ajax({
            url: "@Url.Action("GetAppointmentsByParent", "Product")",
            type: "post",
            data: params,
            cache: false
        })
        .done(function (response) {
            dp.events.list = response;
            dp.update();
        })
        .fail(function (xhr, ajaxOptions, thrownError) {
            // Error
            DisplayError(xhr, thrownError);
        });
    }
</script>

<script type="text/javascript">

    $(document).ready(function () {

        ClearSelectedSlot();

        $("#btnBackToCalendar").click(function () {
            ClearSelectedSlot();
            loadEvents();
            return false;
        });

        $("#btnRequestAppointment").click(function () {
            var params = {
                resourceId: $("#resourceId").val(),
                start: $("#txtStart").val(),
                end: $("#txtEnd").val(),
                parentProductId: "@Model.Id",
            };
            console.log("params=", params);
            $.ajax({
                url: "@Url.Action("SaveVendorAppointment", "Product")",
                type: "post",
                datatype: "json",
                data: params,
                cache: false
            })
            .done(function (response) {
                console.log("response=", response);
                if (response.status) {
                    ClearSelectedSlot();
                    loadEvents();
                }
                else {
                    DisplaySelectedSlot(response);
                }
            })
            .fail(function (xhr, ajaxOptions, thrownError) {
                // Error
                DisplayError(xhr, thrownError);
            });

            return false;
        });
    });

    function DisplaySelectedSlot(response) {
        $("#booking-calendar").hide();
        $("#booking-form").show();
        if (response.status) {
            $("#resourceId").val(response.data.resource);
            $("#txtResource").val(response.data.resourceName);
            $("#txtTimeSlot").val(response.data.timeRange);
            $("#txtStart").val(response.data.start);
            $("#txtEnd").val(response.data.end);
        }
        if (response.message) {
            $("#rMessage").text(response.message);
        }
        else {
            $("#rMessage").text("");
        }
    }

    function ClearSelectedSlot() {
        $("#booking-calendar").show();
        $("#booking-form").hide();
        $("#resourceId").val("");
        $("#rMessage").text("");
    }

    function DisplayError(response, thrownError) {
        $("#rMessage").text(thrownError + "\r\n" + response.status + "\r\n" + response.statusText);
    }
</script>
